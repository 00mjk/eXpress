// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: targets.proto

#ifndef PROTOBUF_targets_2eproto__INCLUDED
#define PROTOBUF_targets_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_targets_2eproto();
void protobuf_AssignDesc_targets_2eproto();
void protobuf_ShutdownFile_targets_2eproto();

class Target;

// ===================================================================

class Target : public ::google::protobuf::Message {
 public:
  Target();
  virtual ~Target();
  
  Target(const Target& from);
  
  inline Target& operator=(const Target& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Target& default_instance();
  
  void Swap(Target* other);
  
  // implements Message ----------------------------------------------
  
  Target* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Target& from);
  void MergeFrom(const Target& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);
  
  // required bytes seq = 4;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 4;
  inline const ::std::string& seq() const;
  inline void set_seq(const ::std::string& value);
  inline void set_seq(const char* value);
  inline void set_seq(const void* value, size_t size);
  inline ::std::string* mutable_seq();
  inline ::std::string* release_seq();
  
  // required bytes bias_indices_l = 5;
  inline bool has_bias_indices_l() const;
  inline void clear_bias_indices_l();
  static const int kBiasIndicesLFieldNumber = 5;
  inline const ::std::string& bias_indices_l() const;
  inline void set_bias_indices_l(const ::std::string& value);
  inline void set_bias_indices_l(const char* value);
  inline void set_bias_indices_l(const void* value, size_t size);
  inline ::std::string* mutable_bias_indices_l();
  inline ::std::string* release_bias_indices_l();
  
  // required bytes bias_indices_r = 6;
  inline bool has_bias_indices_r() const;
  inline void clear_bias_indices_r();
  static const int kBiasIndicesRFieldNumber = 6;
  inline const ::std::string& bias_indices_r() const;
  inline void set_bias_indices_r(const ::std::string& value);
  inline void set_bias_indices_r(const char* value);
  inline void set_bias_indices_r(const void* value, size_t size);
  inline ::std::string* mutable_bias_indices_r();
  inline ::std::string* release_bias_indices_r();
  
  // @@protoc_insertion_point(class_scope:proto.Target)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_bias_indices_l();
  inline void clear_has_bias_indices_l();
  inline void set_has_bias_indices_r();
  inline void clear_has_bias_indices_r();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 length_;
  ::std::string* seq_;
  ::std::string* bias_indices_l_;
  ::std::string* bias_indices_r_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_targets_2eproto();
  friend void protobuf_AssignDesc_targets_2eproto();
  friend void protobuf_ShutdownFile_targets_2eproto();
  
  void InitAsDefaultInstance();
  static Target* default_instance_;
};
// ===================================================================


// ===================================================================

// Target

// optional string name = 1;
inline bool Target::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Target::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Target::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Target::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Target::name() const {
  return *name_;
}
inline void Target::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Target::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Target::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Target::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Target::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 id = 2;
inline bool Target::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Target::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Target::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Target::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Target::id() const {
  return id_;
}
inline void Target::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 length = 3;
inline bool Target::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Target::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Target::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Target::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 Target::length() const {
  return length_;
}
inline void Target::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// required bytes seq = 4;
inline bool Target::has_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Target::set_has_seq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Target::clear_has_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Target::clear_seq() {
  if (seq_ != &::google::protobuf::internal::kEmptyString) {
    seq_->clear();
  }
  clear_has_seq();
}
inline const ::std::string& Target::seq() const {
  return *seq_;
}
inline void Target::set_seq(const ::std::string& value) {
  set_has_seq();
  if (seq_ == &::google::protobuf::internal::kEmptyString) {
    seq_ = new ::std::string;
  }
  seq_->assign(value);
}
inline void Target::set_seq(const char* value) {
  set_has_seq();
  if (seq_ == &::google::protobuf::internal::kEmptyString) {
    seq_ = new ::std::string;
  }
  seq_->assign(value);
}
inline void Target::set_seq(const void* value, size_t size) {
  set_has_seq();
  if (seq_ == &::google::protobuf::internal::kEmptyString) {
    seq_ = new ::std::string;
  }
  seq_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Target::mutable_seq() {
  set_has_seq();
  if (seq_ == &::google::protobuf::internal::kEmptyString) {
    seq_ = new ::std::string;
  }
  return seq_;
}
inline ::std::string* Target::release_seq() {
  clear_has_seq();
  if (seq_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seq_;
    seq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes bias_indices_l = 5;
inline bool Target::has_bias_indices_l() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Target::set_has_bias_indices_l() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Target::clear_has_bias_indices_l() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Target::clear_bias_indices_l() {
  if (bias_indices_l_ != &::google::protobuf::internal::kEmptyString) {
    bias_indices_l_->clear();
  }
  clear_has_bias_indices_l();
}
inline const ::std::string& Target::bias_indices_l() const {
  return *bias_indices_l_;
}
inline void Target::set_bias_indices_l(const ::std::string& value) {
  set_has_bias_indices_l();
  if (bias_indices_l_ == &::google::protobuf::internal::kEmptyString) {
    bias_indices_l_ = new ::std::string;
  }
  bias_indices_l_->assign(value);
}
inline void Target::set_bias_indices_l(const char* value) {
  set_has_bias_indices_l();
  if (bias_indices_l_ == &::google::protobuf::internal::kEmptyString) {
    bias_indices_l_ = new ::std::string;
  }
  bias_indices_l_->assign(value);
}
inline void Target::set_bias_indices_l(const void* value, size_t size) {
  set_has_bias_indices_l();
  if (bias_indices_l_ == &::google::protobuf::internal::kEmptyString) {
    bias_indices_l_ = new ::std::string;
  }
  bias_indices_l_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Target::mutable_bias_indices_l() {
  set_has_bias_indices_l();
  if (bias_indices_l_ == &::google::protobuf::internal::kEmptyString) {
    bias_indices_l_ = new ::std::string;
  }
  return bias_indices_l_;
}
inline ::std::string* Target::release_bias_indices_l() {
  clear_has_bias_indices_l();
  if (bias_indices_l_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bias_indices_l_;
    bias_indices_l_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes bias_indices_r = 6;
inline bool Target::has_bias_indices_r() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Target::set_has_bias_indices_r() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Target::clear_has_bias_indices_r() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Target::clear_bias_indices_r() {
  if (bias_indices_r_ != &::google::protobuf::internal::kEmptyString) {
    bias_indices_r_->clear();
  }
  clear_has_bias_indices_r();
}
inline const ::std::string& Target::bias_indices_r() const {
  return *bias_indices_r_;
}
inline void Target::set_bias_indices_r(const ::std::string& value) {
  set_has_bias_indices_r();
  if (bias_indices_r_ == &::google::protobuf::internal::kEmptyString) {
    bias_indices_r_ = new ::std::string;
  }
  bias_indices_r_->assign(value);
}
inline void Target::set_bias_indices_r(const char* value) {
  set_has_bias_indices_r();
  if (bias_indices_r_ == &::google::protobuf::internal::kEmptyString) {
    bias_indices_r_ = new ::std::string;
  }
  bias_indices_r_->assign(value);
}
inline void Target::set_bias_indices_r(const void* value, size_t size) {
  set_has_bias_indices_r();
  if (bias_indices_r_ == &::google::protobuf::internal::kEmptyString) {
    bias_indices_r_ = new ::std::string;
  }
  bias_indices_r_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Target::mutable_bias_indices_r() {
  set_has_bias_indices_r();
  if (bias_indices_r_ == &::google::protobuf::internal::kEmptyString) {
    bias_indices_r_ = new ::std::string;
  }
  return bias_indices_r_;
}
inline ::std::string* Target::release_bias_indices_r() {
  clear_has_bias_indices_r();
  if (bias_indices_r_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bias_indices_r_;
    bias_indices_r_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_targets_2eproto__INCLUDED
