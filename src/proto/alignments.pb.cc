// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "alignments.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* ReadAlignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadAlignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* FragmentAlignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FragmentAlignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fragment_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_alignments_2eproto() {
  protobuf_AddDesc_alignments_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "alignments.proto");
  GOOGLE_CHECK(file != NULL);
  ReadAlignment_descriptor_ = file->message_type(0);
  static const int ReadAlignment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadAlignment, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadAlignment, error_indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadAlignment, bias_indices_),
  };
  ReadAlignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadAlignment_descriptor_,
      ReadAlignment::default_instance_,
      ReadAlignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadAlignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadAlignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadAlignment));
  FragmentAlignment_descriptor_ = file->message_type(1);
  static const int FragmentAlignment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentAlignment, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentAlignment, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentAlignment, read_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentAlignment, read_r_),
  };
  FragmentAlignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FragmentAlignment_descriptor_,
      FragmentAlignment::default_instance_,
      FragmentAlignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentAlignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentAlignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FragmentAlignment));
  Fragment_descriptor_ = file->message_type(2);
  static const int Fragment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fragment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fragment, paired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fragment, alignments_),
  };
  Fragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fragment_descriptor_,
      Fragment::default_instance_,
      Fragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fragment));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_alignments_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadAlignment_descriptor_, &ReadAlignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FragmentAlignment_descriptor_, &FragmentAlignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fragment_descriptor_, &Fragment::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_alignments_2eproto() {
  delete ReadAlignment::default_instance_;
  delete ReadAlignment_reflection_;
  delete FragmentAlignment::default_instance_;
  delete FragmentAlignment_reflection_;
  delete Fragment::default_instance_;
  delete Fragment_reflection_;
}

void protobuf_AddDesc_alignments_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020alignments.proto\022\005proto\"K\n\rReadAlignme"
    "nt\022\r\n\005first\030\001 \002(\010\022\025\n\rerror_indices\030\002 \003(\r"
    "\022\024\n\014bias_indices\030\003 \003(\r\"\202\001\n\021FragmentAlign"
    "ment\022\021\n\ttarget_id\030\001 \002(\r\022\016\n\006length\030\002 \001(\r\022"
    "$\n\006read_l\030\003 \001(\0132\024.proto.ReadAlignment\022$\n"
    "\006read_r\030\004 \001(\0132\024.proto.ReadAlignment\"V\n\010F"
    "ragment\022\014\n\004name\030\001 \001(\t\022\016\n\006paired\030\002 \002(\010\022,\n"
    "\nalignments\030\003 \003(\0132\030.proto.FragmentAlignm"
    "ent", 323);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "alignments.proto", &protobuf_RegisterTypes);
  ReadAlignment::default_instance_ = new ReadAlignment();
  FragmentAlignment::default_instance_ = new FragmentAlignment();
  Fragment::default_instance_ = new Fragment();
  ReadAlignment::default_instance_->InitAsDefaultInstance();
  FragmentAlignment::default_instance_->InitAsDefaultInstance();
  Fragment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_alignments_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_alignments_2eproto {
  StaticDescriptorInitializer_alignments_2eproto() {
    protobuf_AddDesc_alignments_2eproto();
  }
} static_descriptor_initializer_alignments_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ReadAlignment::kFirstFieldNumber;
const int ReadAlignment::kErrorIndicesFieldNumber;
const int ReadAlignment::kBiasIndicesFieldNumber;
#endif  // !_MSC_VER

ReadAlignment::ReadAlignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadAlignment::InitAsDefaultInstance() {
}

ReadAlignment::ReadAlignment(const ReadAlignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadAlignment::SharedCtor() {
  _cached_size_ = 0;
  first_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadAlignment::~ReadAlignment() {
  SharedDtor();
}

void ReadAlignment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadAlignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadAlignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadAlignment_descriptor_;
}

const ReadAlignment& ReadAlignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alignments_2eproto();  return *default_instance_;
}

ReadAlignment* ReadAlignment::default_instance_ = NULL;

ReadAlignment* ReadAlignment::New() const {
  return new ReadAlignment;
}

void ReadAlignment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_ = false;
  }
  error_indices_.Clear();
  bias_indices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadAlignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_indices;
        break;
      }
      
      // repeated uint32 error_indices = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_error_indices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_error_indices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_indices;
        if (input->ExpectTag(24)) goto parse_bias_indices;
        break;
      }
      
      // repeated uint32 bias_indices = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bias_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_bias_indices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bias_indices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bias_indices;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadAlignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->first(), output);
  }
  
  // repeated uint32 error_indices = 2;
  for (int i = 0; i < this->error_indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->error_indices(i), output);
  }
  
  // repeated uint32 bias_indices = 3;
  for (int i = 0; i < this->bias_indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->bias_indices(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadAlignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool first = 1;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->first(), target);
  }
  
  // repeated uint32 error_indices = 2;
  for (int i = 0; i < this->error_indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->error_indices(i), target);
  }
  
  // repeated uint32 bias_indices = 3;
  for (int i = 0; i < this->bias_indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->bias_indices(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadAlignment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool first = 1;
    if (has_first()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated uint32 error_indices = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->error_indices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->error_indices(i));
    }
    total_size += 1 * this->error_indices_size() + data_size;
  }
  
  // repeated uint32 bias_indices = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->bias_indices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bias_indices(i));
    }
    total_size += 1 * this->bias_indices_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadAlignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadAlignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadAlignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadAlignment::MergeFrom(const ReadAlignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  error_indices_.MergeFrom(from.error_indices_);
  bias_indices_.MergeFrom(from.bias_indices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadAlignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadAlignment::CopyFrom(const ReadAlignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadAlignment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReadAlignment::Swap(ReadAlignment* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    error_indices_.Swap(&other->error_indices_);
    bias_indices_.Swap(&other->bias_indices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadAlignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadAlignment_descriptor_;
  metadata.reflection = ReadAlignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FragmentAlignment::kTargetIdFieldNumber;
const int FragmentAlignment::kLengthFieldNumber;
const int FragmentAlignment::kReadLFieldNumber;
const int FragmentAlignment::kReadRFieldNumber;
#endif  // !_MSC_VER

FragmentAlignment::FragmentAlignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FragmentAlignment::InitAsDefaultInstance() {
  read_l_ = const_cast< ::proto::ReadAlignment*>(&::proto::ReadAlignment::default_instance());
  read_r_ = const_cast< ::proto::ReadAlignment*>(&::proto::ReadAlignment::default_instance());
}

FragmentAlignment::FragmentAlignment(const FragmentAlignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FragmentAlignment::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = 0u;
  length_ = 0u;
  read_l_ = NULL;
  read_r_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FragmentAlignment::~FragmentAlignment() {
  SharedDtor();
}

void FragmentAlignment::SharedDtor() {
  if (this != default_instance_) {
    delete read_l_;
    delete read_r_;
  }
}

void FragmentAlignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FragmentAlignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FragmentAlignment_descriptor_;
}

const FragmentAlignment& FragmentAlignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alignments_2eproto();  return *default_instance_;
}

FragmentAlignment* FragmentAlignment::default_instance_ = NULL;

FragmentAlignment* FragmentAlignment::New() const {
  return new FragmentAlignment;
}

void FragmentAlignment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_id_ = 0u;
    length_ = 0u;
    if (has_read_l()) {
      if (read_l_ != NULL) read_l_->::proto::ReadAlignment::Clear();
    }
    if (has_read_r()) {
      if (read_r_ != NULL) read_r_->::proto::ReadAlignment::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FragmentAlignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 target_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }
      
      // optional uint32 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_read_l;
        break;
      }
      
      // optional .proto.ReadAlignment read_l = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read_l:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_l()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_read_r;
        break;
      }
      
      // optional .proto.ReadAlignment read_r = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read_r:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_r()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FragmentAlignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_id(), output);
  }
  
  // optional uint32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }
  
  // optional .proto.ReadAlignment read_l = 3;
  if (has_read_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->read_l(), output);
  }
  
  // optional .proto.ReadAlignment read_r = 4;
  if (has_read_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->read_r(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FragmentAlignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_id(), target);
  }
  
  // optional uint32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }
  
  // optional .proto.ReadAlignment read_l = 3;
  if (has_read_l()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->read_l(), target);
  }
  
  // optional .proto.ReadAlignment read_r = 4;
  if (has_read_r()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->read_r(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FragmentAlignment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_id());
    }
    
    // optional uint32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }
    
    // optional .proto.ReadAlignment read_l = 3;
    if (has_read_l()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_l());
    }
    
    // optional .proto.ReadAlignment read_r = 4;
    if (has_read_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_r());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FragmentAlignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FragmentAlignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FragmentAlignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FragmentAlignment::MergeFrom(const FragmentAlignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_read_l()) {
      mutable_read_l()->::proto::ReadAlignment::MergeFrom(from.read_l());
    }
    if (from.has_read_r()) {
      mutable_read_r()->::proto::ReadAlignment::MergeFrom(from.read_r());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FragmentAlignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FragmentAlignment::CopyFrom(const FragmentAlignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FragmentAlignment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_read_l()) {
    if (!this->read_l().IsInitialized()) return false;
  }
  if (has_read_r()) {
    if (!this->read_r().IsInitialized()) return false;
  }
  return true;
}

void FragmentAlignment::Swap(FragmentAlignment* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(length_, other->length_);
    std::swap(read_l_, other->read_l_);
    std::swap(read_r_, other->read_r_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FragmentAlignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FragmentAlignment_descriptor_;
  metadata.reflection = FragmentAlignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fragment::kNameFieldNumber;
const int Fragment::kPairedFieldNumber;
const int Fragment::kAlignmentsFieldNumber;
#endif  // !_MSC_VER

Fragment::Fragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fragment::InitAsDefaultInstance() {
}

Fragment::Fragment(const Fragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fragment::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paired_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fragment::~Fragment() {
  SharedDtor();
}

void Fragment::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Fragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fragment_descriptor_;
}

const Fragment& Fragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alignments_2eproto();  return *default_instance_;
}

Fragment* Fragment::default_instance_ = NULL;

Fragment* Fragment::New() const {
  return new Fragment;
}

void Fragment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    paired_ = false;
  }
  alignments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_paired;
        break;
      }
      
      // required bool paired = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paired_)));
          set_has_paired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_alignments;
        break;
      }
      
      // repeated .proto.FragmentAlignment alignments = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alignments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alignments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_alignments;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required bool paired = 2;
  if (has_paired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->paired(), output);
  }
  
  // repeated .proto.FragmentAlignment alignments = 3;
  for (int i = 0; i < this->alignments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->alignments(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required bool paired = 2;
  if (has_paired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->paired(), target);
  }
  
  // repeated .proto.FragmentAlignment alignments = 3;
  for (int i = 0; i < this->alignments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->alignments(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fragment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required bool paired = 2;
    if (has_paired()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .proto.FragmentAlignment alignments = 3;
  total_size += 1 * this->alignments_size();
  for (int i = 0; i < this->alignments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alignments(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fragment::MergeFrom(const Fragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  alignments_.MergeFrom(from.alignments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_paired()) {
      set_paired(from.paired());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fragment::CopyFrom(const Fragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fragment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < alignments_size(); i++) {
    if (!this->alignments(i).IsInitialized()) return false;
  }
  return true;
}

void Fragment::Swap(Fragment* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(paired_, other->paired_);
    alignments_.Swap(&other->alignments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fragment_descriptor_;
  metadata.reflection = Fragment_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
