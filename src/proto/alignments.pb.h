// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alignments.proto

#ifndef PROTOBUF_alignments_2eproto__INCLUDED
#define PROTOBUF_alignments_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_alignments_2eproto();
void protobuf_AssignDesc_alignments_2eproto();
void protobuf_ShutdownFile_alignments_2eproto();

class ReadAlignment;
class FragmentAlignment;
class Fragment;

// ===================================================================

class ReadAlignment : public ::google::protobuf::Message {
 public:
  ReadAlignment();
  virtual ~ReadAlignment();
  
  ReadAlignment(const ReadAlignment& from);
  
  inline ReadAlignment& operator=(const ReadAlignment& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadAlignment& default_instance();
  
  void Swap(ReadAlignment* other);
  
  // implements Message ----------------------------------------------
  
  ReadAlignment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadAlignment& from);
  void MergeFrom(const ReadAlignment& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool first = 1;
  inline bool has_first() const;
  inline void clear_first();
  static const int kFirstFieldNumber = 1;
  inline bool first() const;
  inline void set_first(bool value);
  
  // required bytes error_indices = 2;
  inline bool has_error_indices() const;
  inline void clear_error_indices();
  static const int kErrorIndicesFieldNumber = 2;
  inline const ::std::string& error_indices() const;
  inline void set_error_indices(const ::std::string& value);
  inline void set_error_indices(const char* value);
  inline void set_error_indices(const void* value, size_t size);
  inline ::std::string* mutable_error_indices();
  inline ::std::string* release_error_indices();
  
  // required bytes bias_indices = 3;
  inline bool has_bias_indices() const;
  inline void clear_bias_indices();
  static const int kBiasIndicesFieldNumber = 3;
  inline const ::std::string& bias_indices() const;
  inline void set_bias_indices(const ::std::string& value);
  inline void set_bias_indices(const char* value);
  inline void set_bias_indices(const void* value, size_t size);
  inline ::std::string* mutable_bias_indices();
  inline ::std::string* release_bias_indices();
  
  // repeated bool bias_valid = 4;
  inline int bias_valid_size() const;
  inline void clear_bias_valid();
  static const int kBiasValidFieldNumber = 4;
  inline bool bias_valid(int index) const;
  inline void set_bias_valid(int index, bool value);
  inline void add_bias_valid(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      bias_valid() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_bias_valid();
  
  // @@protoc_insertion_point(class_scope:proto.ReadAlignment)
 private:
  inline void set_has_first();
  inline void clear_has_first();
  inline void set_has_error_indices();
  inline void clear_has_error_indices();
  inline void set_has_bias_indices();
  inline void clear_has_bias_indices();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* error_indices_;
  ::std::string* bias_indices_;
  ::google::protobuf::RepeatedField< bool > bias_valid_;
  bool first_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_alignments_2eproto();
  friend void protobuf_AssignDesc_alignments_2eproto();
  friend void protobuf_ShutdownFile_alignments_2eproto();
  
  void InitAsDefaultInstance();
  static ReadAlignment* default_instance_;
};
// -------------------------------------------------------------------

class FragmentAlignment : public ::google::protobuf::Message {
 public:
  FragmentAlignment();
  virtual ~FragmentAlignment();
  
  FragmentAlignment(const FragmentAlignment& from);
  
  inline FragmentAlignment& operator=(const FragmentAlignment& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FragmentAlignment& default_instance();
  
  void Swap(FragmentAlignment* other);
  
  // implements Message ----------------------------------------------
  
  FragmentAlignment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FragmentAlignment& from);
  void MergeFrom(const FragmentAlignment& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 target_id = 1;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 target_id() const;
  inline void set_target_id(::google::protobuf::uint32 value);
  
  // optional uint32 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);
  
  // optional .proto.ReadAlignment read_l = 3;
  inline bool has_read_l() const;
  inline void clear_read_l();
  static const int kReadLFieldNumber = 3;
  inline const ::proto::ReadAlignment& read_l() const;
  inline ::proto::ReadAlignment* mutable_read_l();
  inline ::proto::ReadAlignment* release_read_l();
  
  // optional .proto.ReadAlignment read_r = 4;
  inline bool has_read_r() const;
  inline void clear_read_r();
  static const int kReadRFieldNumber = 4;
  inline const ::proto::ReadAlignment& read_r() const;
  inline ::proto::ReadAlignment* mutable_read_r();
  inline ::proto::ReadAlignment* release_read_r();
  
  // @@protoc_insertion_point(class_scope:proto.FragmentAlignment)
 private:
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_read_l();
  inline void clear_has_read_l();
  inline void set_has_read_r();
  inline void clear_has_read_r();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 target_id_;
  ::google::protobuf::uint32 length_;
  ::proto::ReadAlignment* read_l_;
  ::proto::ReadAlignment* read_r_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_alignments_2eproto();
  friend void protobuf_AssignDesc_alignments_2eproto();
  friend void protobuf_ShutdownFile_alignments_2eproto();
  
  void InitAsDefaultInstance();
  static FragmentAlignment* default_instance_;
};
// -------------------------------------------------------------------

class Fragment : public ::google::protobuf::Message {
 public:
  Fragment();
  virtual ~Fragment();
  
  Fragment(const Fragment& from);
  
  inline Fragment& operator=(const Fragment& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Fragment& default_instance();
  
  void Swap(Fragment* other);
  
  // implements Message ----------------------------------------------
  
  Fragment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fragment& from);
  void MergeFrom(const Fragment& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required bool paired = 2;
  inline bool has_paired() const;
  inline void clear_paired();
  static const int kPairedFieldNumber = 2;
  inline bool paired() const;
  inline void set_paired(bool value);
  
  // repeated .proto.FragmentAlignment alignments = 3;
  inline int alignments_size() const;
  inline void clear_alignments();
  static const int kAlignmentsFieldNumber = 3;
  inline const ::proto::FragmentAlignment& alignments(int index) const;
  inline ::proto::FragmentAlignment* mutable_alignments(int index);
  inline ::proto::FragmentAlignment* add_alignments();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::FragmentAlignment >&
      alignments() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::FragmentAlignment >*
      mutable_alignments();
  
  // @@protoc_insertion_point(class_scope:proto.Fragment)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_paired();
  inline void clear_has_paired();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::proto::FragmentAlignment > alignments_;
  bool paired_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_alignments_2eproto();
  friend void protobuf_AssignDesc_alignments_2eproto();
  friend void protobuf_ShutdownFile_alignments_2eproto();
  
  void InitAsDefaultInstance();
  static Fragment* default_instance_;
};
// ===================================================================


// ===================================================================

// ReadAlignment

// required bool first = 1;
inline bool ReadAlignment::has_first() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadAlignment::set_has_first() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadAlignment::clear_has_first() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadAlignment::clear_first() {
  first_ = false;
  clear_has_first();
}
inline bool ReadAlignment::first() const {
  return first_;
}
inline void ReadAlignment::set_first(bool value) {
  set_has_first();
  first_ = value;
}

// required bytes error_indices = 2;
inline bool ReadAlignment::has_error_indices() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadAlignment::set_has_error_indices() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReadAlignment::clear_has_error_indices() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReadAlignment::clear_error_indices() {
  if (error_indices_ != &::google::protobuf::internal::kEmptyString) {
    error_indices_->clear();
  }
  clear_has_error_indices();
}
inline const ::std::string& ReadAlignment::error_indices() const {
  return *error_indices_;
}
inline void ReadAlignment::set_error_indices(const ::std::string& value) {
  set_has_error_indices();
  if (error_indices_ == &::google::protobuf::internal::kEmptyString) {
    error_indices_ = new ::std::string;
  }
  error_indices_->assign(value);
}
inline void ReadAlignment::set_error_indices(const char* value) {
  set_has_error_indices();
  if (error_indices_ == &::google::protobuf::internal::kEmptyString) {
    error_indices_ = new ::std::string;
  }
  error_indices_->assign(value);
}
inline void ReadAlignment::set_error_indices(const void* value, size_t size) {
  set_has_error_indices();
  if (error_indices_ == &::google::protobuf::internal::kEmptyString) {
    error_indices_ = new ::std::string;
  }
  error_indices_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReadAlignment::mutable_error_indices() {
  set_has_error_indices();
  if (error_indices_ == &::google::protobuf::internal::kEmptyString) {
    error_indices_ = new ::std::string;
  }
  return error_indices_;
}
inline ::std::string* ReadAlignment::release_error_indices() {
  clear_has_error_indices();
  if (error_indices_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_indices_;
    error_indices_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes bias_indices = 3;
inline bool ReadAlignment::has_bias_indices() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadAlignment::set_has_bias_indices() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReadAlignment::clear_has_bias_indices() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReadAlignment::clear_bias_indices() {
  if (bias_indices_ != &::google::protobuf::internal::kEmptyString) {
    bias_indices_->clear();
  }
  clear_has_bias_indices();
}
inline const ::std::string& ReadAlignment::bias_indices() const {
  return *bias_indices_;
}
inline void ReadAlignment::set_bias_indices(const ::std::string& value) {
  set_has_bias_indices();
  if (bias_indices_ == &::google::protobuf::internal::kEmptyString) {
    bias_indices_ = new ::std::string;
  }
  bias_indices_->assign(value);
}
inline void ReadAlignment::set_bias_indices(const char* value) {
  set_has_bias_indices();
  if (bias_indices_ == &::google::protobuf::internal::kEmptyString) {
    bias_indices_ = new ::std::string;
  }
  bias_indices_->assign(value);
}
inline void ReadAlignment::set_bias_indices(const void* value, size_t size) {
  set_has_bias_indices();
  if (bias_indices_ == &::google::protobuf::internal::kEmptyString) {
    bias_indices_ = new ::std::string;
  }
  bias_indices_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReadAlignment::mutable_bias_indices() {
  set_has_bias_indices();
  if (bias_indices_ == &::google::protobuf::internal::kEmptyString) {
    bias_indices_ = new ::std::string;
  }
  return bias_indices_;
}
inline ::std::string* ReadAlignment::release_bias_indices() {
  clear_has_bias_indices();
  if (bias_indices_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bias_indices_;
    bias_indices_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated bool bias_valid = 4;
inline int ReadAlignment::bias_valid_size() const {
  return bias_valid_.size();
}
inline void ReadAlignment::clear_bias_valid() {
  bias_valid_.Clear();
}
inline bool ReadAlignment::bias_valid(int index) const {
  return bias_valid_.Get(index);
}
inline void ReadAlignment::set_bias_valid(int index, bool value) {
  bias_valid_.Set(index, value);
}
inline void ReadAlignment::add_bias_valid(bool value) {
  bias_valid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
ReadAlignment::bias_valid() const {
  return bias_valid_;
}
inline ::google::protobuf::RepeatedField< bool >*
ReadAlignment::mutable_bias_valid() {
  return &bias_valid_;
}

// -------------------------------------------------------------------

// FragmentAlignment

// required uint32 target_id = 1;
inline bool FragmentAlignment::has_target_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FragmentAlignment::set_has_target_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FragmentAlignment::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FragmentAlignment::clear_target_id() {
  target_id_ = 0u;
  clear_has_target_id();
}
inline ::google::protobuf::uint32 FragmentAlignment::target_id() const {
  return target_id_;
}
inline void FragmentAlignment::set_target_id(::google::protobuf::uint32 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional uint32 length = 2;
inline bool FragmentAlignment::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FragmentAlignment::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FragmentAlignment::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FragmentAlignment::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 FragmentAlignment::length() const {
  return length_;
}
inline void FragmentAlignment::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// optional .proto.ReadAlignment read_l = 3;
inline bool FragmentAlignment::has_read_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FragmentAlignment::set_has_read_l() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FragmentAlignment::clear_has_read_l() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FragmentAlignment::clear_read_l() {
  if (read_l_ != NULL) read_l_->::proto::ReadAlignment::Clear();
  clear_has_read_l();
}
inline const ::proto::ReadAlignment& FragmentAlignment::read_l() const {
  return read_l_ != NULL ? *read_l_ : *default_instance_->read_l_;
}
inline ::proto::ReadAlignment* FragmentAlignment::mutable_read_l() {
  set_has_read_l();
  if (read_l_ == NULL) read_l_ = new ::proto::ReadAlignment;
  return read_l_;
}
inline ::proto::ReadAlignment* FragmentAlignment::release_read_l() {
  clear_has_read_l();
  ::proto::ReadAlignment* temp = read_l_;
  read_l_ = NULL;
  return temp;
}

// optional .proto.ReadAlignment read_r = 4;
inline bool FragmentAlignment::has_read_r() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FragmentAlignment::set_has_read_r() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FragmentAlignment::clear_has_read_r() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FragmentAlignment::clear_read_r() {
  if (read_r_ != NULL) read_r_->::proto::ReadAlignment::Clear();
  clear_has_read_r();
}
inline const ::proto::ReadAlignment& FragmentAlignment::read_r() const {
  return read_r_ != NULL ? *read_r_ : *default_instance_->read_r_;
}
inline ::proto::ReadAlignment* FragmentAlignment::mutable_read_r() {
  set_has_read_r();
  if (read_r_ == NULL) read_r_ = new ::proto::ReadAlignment;
  return read_r_;
}
inline ::proto::ReadAlignment* FragmentAlignment::release_read_r() {
  clear_has_read_r();
  ::proto::ReadAlignment* temp = read_r_;
  read_r_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Fragment

// optional string name = 1;
inline bool Fragment::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fragment::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fragment::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fragment::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Fragment::name() const {
  return *name_;
}
inline void Fragment::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Fragment::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Fragment::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Fragment::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Fragment::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool paired = 2;
inline bool Fragment::has_paired() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fragment::set_has_paired() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fragment::clear_has_paired() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fragment::clear_paired() {
  paired_ = false;
  clear_has_paired();
}
inline bool Fragment::paired() const {
  return paired_;
}
inline void Fragment::set_paired(bool value) {
  set_has_paired();
  paired_ = value;
}

// repeated .proto.FragmentAlignment alignments = 3;
inline int Fragment::alignments_size() const {
  return alignments_.size();
}
inline void Fragment::clear_alignments() {
  alignments_.Clear();
}
inline const ::proto::FragmentAlignment& Fragment::alignments(int index) const {
  return alignments_.Get(index);
}
inline ::proto::FragmentAlignment* Fragment::mutable_alignments(int index) {
  return alignments_.Mutable(index);
}
inline ::proto::FragmentAlignment* Fragment::add_alignments() {
  return alignments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::FragmentAlignment >&
Fragment::alignments() const {
  return alignments_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::FragmentAlignment >*
Fragment::mutable_alignments() {
  return &alignments_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_alignments_2eproto__INCLUDED
